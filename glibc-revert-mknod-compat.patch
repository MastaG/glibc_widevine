From 9036019b09f0e6fd9d66721f4d6bbc856bb27da2 Mon Sep 17 00:00:00 2001
From: Siddhesh Poyarekar <siddhesh@sourceware.org>
Date: Wed, 21 Oct 2020 14:51:39 +0530
Subject: [PATCH] Revert "linux: Move xmknod{at} to compat symbols"

This reverts commit 81b83ff61f95f30ad53d6075247af0ea61a0b16e.
---
 include/sys/stat.h                            |  4 +--
 sysdeps/mach/hurd/xmknod.c                    | 17 +++------
 sysdeps/mach/hurd/xmknodat.c                  | 12 +------
 sysdeps/unix/sysv/linux/mknod.c               | 28 ---------------
 sysdeps/unix/sysv/linux/mknodat.c             | 35 -------------------
 .../unix/sysv/linux/riscv/rv32/libc.abilist   |  2 ++
 sysdeps/unix/sysv/linux/xmknod.c              | 20 +++++++----
 sysdeps/unix/sysv/linux/xmknodat.c            | 23 ++++++++----
 8 files changed, 40 insertions(+), 101 deletions(-)
 delete mode 100644 sysdeps/unix/sysv/linux/mknod.c
 delete mode 100644 sysdeps/unix/sysv/linux/mknodat.c

diff --git a/include/sys/stat.h b/include/sys/stat.h
index 108cb0c9bf..9a4a8f62cc 100644
--- a/include/sys/stat.h
+++ b/include/sys/stat.h
@@ -79,8 +79,10 @@ libc_hidden_proto (__mknod);
 
 extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
 		     __dev_t *__dev);
+libc_hidden_proto (__xmknod)
 extern int __xmknodat (int __ver, int __fd, const char *__path,
 		       __mode_t __mode, __dev_t *__dev);
+libc_hidden_proto (__xmknodat)
 
 int __fxstat (int __ver, int __fildes, struct stat *__stat_buf);
 int __xstat (int __ver, const char *__filename,
@@ -106,8 +108,6 @@ hidden_proto (__xstat64);
 hidden_proto (__lxstat64);
 hidden_proto (__fxstatat64);
 #  endif
-libc_hidden_proto (__xmknod)
-libc_hidden_proto (__xmknodat)
 #  define stat(fname, buf) __xstat (_STAT_VER, fname, buf)
 #  define lstat(fname, buf)  __lxstat (_STAT_VER, fname, buf)
 #  define __lstat(fname, buf)  __lxstat (_STAT_VER, fname, buf)
diff --git a/sysdeps/mach/hurd/xmknod.c b/sysdeps/mach/hurd/xmknod.c
index a1b5af086d..0ab4f1b719 100644
--- a/sysdeps/mach/hurd/xmknod.c
+++ b/sysdeps/mach/hurd/xmknod.c
@@ -15,9 +15,12 @@
    License along with the GNU C Library; if not, see
    <https://www.gnu.org/licenses/>.  */
 
-#include <sys/stat.h>
+#include <errno.h>
 #include <fcntl.h>
-#include <shlib-compat.h>
+#include <stddef.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
 
 /* Create a device file named FILE_NAME, with permission and special bits MODE
    and device number DEV (which can be constructed from major and minor
@@ -28,13 +31,3 @@ __xmknod (int vers, const char *file_name, mode_t mode, dev_t *dev)
   return __xmknodat (vers, AT_FDCWD, file_name, mode, dev);
 }
 libc_hidden_def (__xmknod)
-
-#if SHLIB_COMPAT(libc, GLIBC_2_0, GLIBC_2_33)
-int
-__xmknod_compat (int vers, const char *file_name, mode_t mode, dev_t *dev)
-{
-  return __xmknod (vers, file_name, mode, dev);
-}
-
-compat_symbol (libc, __xmknod_compat, __xmknod, GLIBC_2_0);
-#endif
diff --git a/sysdeps/mach/hurd/xmknodat.c b/sysdeps/mach/hurd/xmknodat.c
index 90724694d5..4239d1ea91 100644
--- a/sysdeps/mach/hurd/xmknodat.c
+++ b/sysdeps/mach/hurd/xmknodat.c
@@ -26,7 +26,6 @@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/sysmacros.h>
-#include <shlib-compat.h>
 
 /* Create a device file named PATH relative to FD, with permission and
    special bits MODE and device number DEV (which can be constructed
@@ -117,14 +116,5 @@ __xmknodat (int vers, int fd, const char *path, mode_t mode, dev_t *dev)
     return __hurd_fail (err);
   return 0;
 }
-libc_hidden_def (__xmknodat)
-
-#if SHLIB_COMPAT(libc, GLIBC_2_4, GLIBC_2_33)
-int
-__xmknodat_compat (int vers, int fd, const char *path, mode_t mode, dev_t *dev)
-{
-  return __xmknodat (vers, fd, path, mode, dev);
-}
 
-compat_symbol (libc, __xmknodat_compat, __xmknodat, GLIBC_2_4);
-#endif
+libc_hidden_def (__xmknodat)
diff --git a/sysdeps/unix/sysv/linux/mknod.c b/sysdeps/unix/sysv/linux/mknod.c
deleted file mode 100644
index 7e290ddc8b..0000000000
--- a/sysdeps/unix/sysv/linux/mknod.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* Create a special or ordinary file.  Linux version.
-   Copyright (C) 2020 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/stat.h>
-#include <fcntl.h>
-
-int
-__mknod (const char *path, mode_t mode, dev_t dev)
-{
-  return __mknodat (AT_FDCWD, path, mode, dev);
-}
-libc_hidden_def (__mknod)
-weak_alias (__mknod, mknod)
diff --git a/sysdeps/unix/sysv/linux/mknodat.c b/sysdeps/unix/sysv/linux/mknodat.c
deleted file mode 100644
index fdb8f1951a..0000000000
--- a/sysdeps/unix/sysv/linux/mknodat.c
+++ /dev/null
@@ -1,35 +0,0 @@
-/* Create a special or ordinary file.  Linux version.
-   Copyright (C) 2020 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <errno.h>
-
-int
-__mknodat (int fd, const char *path, mode_t mode, dev_t dev)
-{
-  /* The user-exported dev_t is 64-bit while the kernel interface is
-     32-bit.  */
-  unsigned int k_dev = dev;
-  if (k_dev != dev)
-    return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
-
-  return INLINE_SYSCALL_CALL (mknodat, fd, path, mode, k_dev);
-}
-libc_hidden_def (__mknodat)
-weak_alias (__mknodat, mknodat)
diff --git a/sysdeps/unix/sysv/linux/riscv/rv32/libc.abilist b/sysdeps/unix/sysv/linux/riscv/rv32/libc.abilist
index 365a6b17cf..d984c02492 100644
--- a/sysdeps/unix/sysv/linux/riscv/rv32/libc.abilist
+++ b/sysdeps/unix/sysv/linux/riscv/rv32/libc.abilist
@@ -484,6 +484,8 @@ GLIBC_2.33 __wprintf_chk F
 GLIBC_2.33 __write F
 GLIBC_2.33 __wuflow F
 GLIBC_2.33 __wunderflow F
+GLIBC_2.33 __xmknod F
+GLIBC_2.33 __xmknodat F
 GLIBC_2.33 __xpg_basename F
 GLIBC_2.33 __xpg_sigpause F
 GLIBC_2.33 __xpg_strerror_r F
diff --git a/sysdeps/unix/sysv/linux/xmknod.c b/sysdeps/unix/sysv/linux/xmknod.c
index 82bb0bd953..42809d4c57 100644
--- a/sysdeps/unix/sysv/linux/xmknod.c
+++ b/sysdeps/unix/sysv/linux/xmknod.c
@@ -17,23 +17,29 @@
    <https://www.gnu.org/licenses/>.  */
 
 #include <sys/stat.h>
+#include <sys/sysmacros.h>
 #include <fcntl.h>
-#include <errno.h>
-#include <shlib-compat.h>
+#include <sysdep.h>
 
-#if SHLIB_COMPAT(libc, GLIBC_2_0, GLIBC_2_33)
 /* Create a device file named PATH, with permission and special bits MODE
    and device number DEV (which can be constructed from major and minor
    device numbers with the `makedev' macro above).  */
 int
-attribute_compat_text_section
 __xmknod (int vers, const char *path, mode_t mode, dev_t *dev)
 {
+  unsigned long long int k_dev;
+
   if (vers != _MKNOD_VER)
     return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
 
-  return __mknodat (AT_FDCWD, path, mode, *dev);
+  /* We must convert the value to dev_t type used by the kernel.  */
+  k_dev =  (*dev) & ((1ULL << 32) - 1);
+  if (k_dev != *dev)
+    return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+
+  return INLINE_SYSCALL_CALL (mknodat, AT_FDCWD, path, mode,
+			      (unsigned int) k_dev);
 }
 
-compat_symbol (libc, __xmknod, __xmknod, GLIBC_2_0);
-#endif
+weak_alias (__xmknod, _xmknod)
+libc_hidden_def (__xmknod)
diff --git a/sysdeps/unix/sysv/linux/xmknodat.c b/sysdeps/unix/sysv/linux/xmknodat.c
index fae3fe54d1..5640a499aa 100644
--- a/sysdeps/unix/sysv/linux/xmknodat.c
+++ b/sysdeps/unix/sysv/linux/xmknodat.c
@@ -15,11 +15,18 @@
    License along with the GNU C Library; if not, see
    <https://www.gnu.org/licenses/>.  */
 
-#include <sys/stat.h>
 #include <errno.h>
-#include <shlib-compat.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/sysmacros.h>
+
+#include <sysdep.h>
+#include <sys/syscall.h>
+
 
-#if SHLIB_COMPAT(libc, GLIBC_2_4, GLIBC_2_33)
 /* Create a device file named PATH relative to FD, with permission and
    special bits MODE and device number DEV (which can be constructed
    from major and minor device numbers with the `makedev' macro above).  */
@@ -29,8 +36,12 @@ __xmknodat (int vers, int fd, const char *file, mode_t mode, dev_t *dev)
   if (vers != _MKNOD_VER)
     return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
 
-  return __mknodat (fd, file, mode, *dev);
+  /* We must convert the value to dev_t type used by the kernel.  */
+  unsigned long long int k_dev =  (*dev) & ((1ULL << 32) - 1);
+  if (k_dev != *dev)
+    return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+
+  return INLINE_SYSCALL (mknodat, 4, fd, file, mode, (unsigned int) k_dev);
 }
 
-compat_symbol (libc, __xmknodat, __xmknodat, GLIBC_2_4);
-#endif
+libc_hidden_def (__xmknodat)
-- 
2.26.2

